[mio::sys::unix::kqueue][TRACE] registering; token=Token(18446744073709551615); interests=Readable
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(18446744073709551615); interests=Readable
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(18446744073709551615); interests=Readable
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(18446744073709551615); interests=Readable
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(18446744073709551615); interests=Readable
[mio::poll][TRACE] registering with poller
[tokio_executor::threadpool::builder][TRACE] build; num_workers=4 
[tokio_net::driver::reactor][DEBUG] poll; max_wait=None 
[tokio_net::driver::reactor][DEBUG] -> poll
[animerobar][INFO] Robando pagina: 19
[animerobar][INFO] Robando pagina: 11
[animerobar][INFO] Robando pagina: 16
[animerobar][INFO] Robando pagina: 1
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 20
[animerobar][INFO] Robando pagina: 12
[animerobar][INFO] Robando pagina: 17
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 2
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 21
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 18
[animerobar][INFO] Robando pagina: 13
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 3
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 22
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 64
[animerobar][INFO] Robando pagina: 4
[animerobar][INFO] Robando pagina: 14
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 5
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 23
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 15
[animerobar][INFO] Robando pagina: 65
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 6
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 66
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 24
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 7
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 58
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 25
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 59
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 8
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 67
[animerobar][INFO] Robando pagina: 26
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 60
[animerobar][INFO] Robando pagina: 68
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 9
[animerobar][INFO] Robando pagina: 27
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 61
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 10
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 69
[animerobar][INFO] Robando pagina: 28
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 81
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 62
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 63
[animerobar][INFO] Robando pagina: 70
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 29
[animerobar][INFO] Robando pagina: 82
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 71
[animerobar][INFO] Robando pagina: 30
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 76
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 83
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 72
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 31
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 84
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 77
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 78
[animerobar][INFO] Robando pagina: 73
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 32
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 74
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 79
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 33
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 85
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 75
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 80
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 34
[animerobar][INFO] Robando pagina: 86
[animerobar][INFO] Robando pagina: 87
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 35
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 89
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 36
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 37
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 88
[animerobar][INFO] Robando pagina: 47
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 42
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 38
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 43
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 48
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 39
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 44
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 49
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 50
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 45
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 40
[animerobar][INFO] Robando pagina: 51
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 46
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 52
[animerobar][INFO] Robando pagina: 41
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 53
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 56
[animerobar][INFO] Robando pagina: 55
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 54
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[animerobar][INFO] Robando pagina: 57
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 90
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 91
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 92
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 93
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[animerobar][INFO] Robando pagina: 94
[animerobar][INFO] Robando pagina: 95
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[animerobar][INFO] Robando pagina: 96
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(0); interests=Readable | Writable | Error | Hup
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(4194305); interests=Readable | Writable | Error | Hup
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[mio::poll][TRACE] registering with poller
[animerobar][INFO] Robando pagina: 97
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[mio::sys::unix::kqueue][TRACE] registering; token=Token(8388610); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::pool][TRACE] checkout waiting for idle connection: "https://monoschinos.com"
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][TRACE] Http::connect; scheme=https, host=monoschinos.com, port=None
[mio::sys::unix::kqueue][TRACE] registering; token=Token(12582915); interests=Readable | Writable | Error | Hup
[hyper::client::connect::dns][DEBUG] resolving host="monoschinos.com"
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(0); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(16777220); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(20971525); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(25165830); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(4194305); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(0); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(0); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(29360135); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(4194305); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(33554440); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(8388610); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(4194305); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(8388610); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(8388610); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(37748745); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(12582915); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(41943050); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(12582915); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(12582915); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(16777220); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(46137355); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(16777220); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(16777220); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(50331660); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(20971525); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(20971525); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[mio::sys::unix::kqueue][TRACE] registering; token=Token(20971525); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(25165830); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(25165830); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[mio::sys::unix::kqueue][TRACE] registering; token=Token(29360135); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(25165830); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(29360135); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(29360135); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(33554440); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(33554440); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(37748745); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(33554440); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(54525965); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(37748745); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(37748745); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(41943050); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(58720270); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(41943050); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(46137355); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(62914575); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(41943050); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(50331660); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(46137355); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(67108880); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(54525965); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(71303185); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(46137355); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(50331660); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(58720270); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(75497490); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(54525965); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(50331660); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(62914575); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(79691795); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(54525965); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(67108880); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(58720270); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(83886100); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(71303185); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(62914575); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(58720270); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(88080405); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(75497490); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(67108880); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(62914575); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(67108880); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(71303185); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(92274710); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(75497490); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(79691795); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(83886100); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(88080405); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(96469015); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(100663320); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(71303185); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(79691795); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(83886100); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(92274710); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(75497490); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(104857625); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(96469015); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(88080405); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::sys::unix::kqueue][TRACE] registering; token=Token(92274710); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(109051930); interests=Readable | Writable | Error | Hup
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(79691795); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(100663320); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[hyper::client::connect::http][DEBUG] connecting to 104.27.165.234:443
[mio::poll][TRACE] registering with poller
[mio::poll][TRACE] registering with poller
[mio::sys::unix::kqueue][TRACE] registering; token=Token(96469015); interests=Readable | Writable | Error | Hup
[mio::sys::unix::kqueue][TRACE] registering; token=Token(113246235); interests=Readable | Writable | Error | Hup
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::connect::http][DEBUG] connected to Some(V4(104.27.165.234:443))
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] signal: Want
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal found waiting giver, notifying
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] poll_want: taker wants!
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] poll_want: taker wants!
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] poll_want: taker wants!
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::conn][TRACE] Conn::read_head
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::role][TRACE] Response.parse([Header; 100], [u8; 1369])
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::role][TRACE] Response.parse Complete(698)
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][DEBUG] parsed 15 headers
[hyper::proto::h1::conn][DEBUG] incoming body is chunked encoding
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Size, 0)
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Chunk size is 15568
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0x3CD0 (15568 bytes)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=15568
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 14903)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] Conn::read_head
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::role][TRACE] Response.parse([Header; 100], [u8; 1369])
[hyper::proto::h1::role][TRACE] Response.parse Complete(698)
[hyper::proto::h1::io][DEBUG] parsed 15 headers
[hyper::proto::h1::conn][DEBUG] incoming body is chunked encoding
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Size, 0)
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Chunk size is 32064
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0x7D40 (32064 bytes)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=32064
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 31399)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[reqwest::async_impl::response][DEBUG] Response: '200 OK' for https://monoschinos.com/animes?page=15
[reqwest::async_impl::response][DEBUG] Response: '200 OK' for https://monoschinos.com/animes?page=5
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 14903)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=14903
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 13534)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 31399)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=31399
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 30030)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 13534)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=13534
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 12165)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 30030)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=30030
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 28661)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 12165)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=12165
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 10796)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 28661)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=28661
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 27292)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 10796)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=10796
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 9427)), writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 27292)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=27292
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 25923)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 9427)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=9427
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 8058)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 25923)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=25923
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 24554)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 8058)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=8058
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 6689)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 24554)
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=24554
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 23185)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 6689)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=6689
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 5320)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 23185)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=23185
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 21816)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 5320)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=5320
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 3951)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] signal: Want
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 21816)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=21816
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 20447)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal: Want
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal found waiting giver, notifying
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] signal: Want
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal found waiting giver, notifying
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 3951)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=3951
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 2582)), writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[want][TRACE] signal: Want
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] signal: Want
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 103 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] signal: Want
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal found waiting giver, notifying
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal found waiting giver, notifying
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] signal: Want
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] poll_want: taker wants!
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] signal: Want
[want][TRACE] poll_want: taker wants!
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal found waiting giver, notifying
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal: Want
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::client::conn][TRACE] client handshake HTTP/1
[want][TRACE] signal: Want
[want][TRACE] poll_want: taker wants!
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal: Want
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 20447)
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=20447
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 19078)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 2582)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=2582
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[want][TRACE] signal: Want
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 1213)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal: Want
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] signal: Want
[want][TRACE] signal: Want
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal found waiting giver, notifying
[want][TRACE] signal: Want
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 1213)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1213
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] read 1215 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 19078)
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=19078
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 17709)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 17709)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=17709
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 16340)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Chunk size is 17756
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0x455C (17756 bytes)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=17756
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 16393)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 16393)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=16393
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 15024)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 16340)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=16340
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 14971)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] Conn::read_head
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 14971)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=14971
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 13602)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 15024)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=15024
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 13655)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Response.parse([Header; 100], [u8; 1369])
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 13602)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=13602
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 13655)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=13655
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::role][TRACE] Response.parse Complete(698)
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 12233)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[want][TRACE] signal: Want
[hyper::proto::h1::io][DEBUG] parsed 15 headers
[hyper::proto::h1::conn][DEBUG] incoming body is chunked encoding
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Size, 0)
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 12286)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Chunk size is 15568
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 12233)
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=12233
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0x3CD0 (15568 bytes)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=15568
[reqwest::async_impl::response][DEBUG] Response: '200 OK' for https://monoschinos.com/animes?page=49
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 14903)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 14903)
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=14903
[want][TRACE] signal: Want
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 10864)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 13534)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 12286)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=12286
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 10917)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 13534)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=13534
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 10864)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=10864
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 12165)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 9495)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 12165)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=12165
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 10796)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 10917)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=10917
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 9548)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 10796)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=10796
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 9427)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 9495)
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=9495
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 8126)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 9548)
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 9427)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=9427
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 8058)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 8126)
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 8058)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=8058
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 6689)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=9548
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=8126
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 8179)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 6757)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 6689)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=6689
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 5320)), writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 5320)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=5320
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 3951)), writing: KeepAlive, keep_alive: Busy }
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 6757)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=6757
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 5388)), writing: KeepAlive, keep_alive: Busy }
[hyper::client::conn][TRACE] client handshake HTTP/1
[hyper::client][TRACE] handshake complete, spawning background dispatcher task
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 3951)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=3951
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 5388)
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 8179)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=8179
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 2582)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 6810)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=5388
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 4019)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 4019)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=4019
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 2582)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=2582
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 1213)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 6810)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=6810
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 1213)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1213
[hyper::proto::h1::io][DEBUG] read 1215 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] signal: Want
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 5441)), writing: KeepAlive, keep_alive: Busy }
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 2650)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 2650)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=2650
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 5441)
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 1281)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Chunk size is 19493
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0x4C25 (19493 bytes)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=19493
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=5441
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 18130)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 4072)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 1281)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1281
[hyper::proto::h1::io][DEBUG] read 1283 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 4072)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=4072
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 2703)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 18130)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=18130
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 16761)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 2703)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=2703
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 1334)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 1334)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1334
[hyper::proto::h1::io][DEBUG] read 1336 bytes
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 16761)
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=16761
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Chunk size is 1409
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0x581 (1409 bytes)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1409
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[want][TRACE] signal: Want
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 45)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 15392)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::io][DEBUG] read 5 bytes
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Chunk size is 0
[hyper::proto::h1::decode][TRACE] end of chunked
[hyper::proto::h1::conn][DEBUG] incoming body completed
[hyper::proto::h1::conn][TRACE] maybe_notify; read_from_io blocked
[want][TRACE] signal: Want
[want][TRACE] signal found waiting giver, notifying
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 45)
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 15392)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=45
[want][TRACE] signal: Want
[want][TRACE] poll_want: taker wants!
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=15392
[hyper::client::pool][TRACE] checkout dropped for "https://monoschinos.com"
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 14023)), writing: KeepAlive, keep_alive: Busy }
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] put; add idle connection for "https://monoschinos.com"
[hyper::proto::h1::io][DEBUG] read 47 bytes
[hyper::proto::h1::role][TRACE] Client::encode method=GET, body=None
[hyper::client::pool][DEBUG] pooling idle connection for "https://monoschinos.com"
[hyper::proto::h1::io][TRACE] detected no usage of vectored write, flattening
[hyper::proto::h1::io][DEBUG] flushed 104 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 14023)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=14023
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 12654)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character !
[html5ever::tokenizer][DEBUG] processing in state MarkupDeclarationOpen
[html5ever::tokenizer][DEBUG] processing in state Doctype
[hyper::proto::h1::io][DEBUG] read 5 bytes
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 12654)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeDoctypeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state DoctypeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character m
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::decode][TRACE] Chunk size is 0
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=12654
[hyper::proto::h1::decode][TRACE] end of chunked
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[hyper::proto::h1::conn][DEBUG] incoming body completed
[html5ever::tokenizer][DEBUG] processing in state TagName
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::conn][TRACE] maybe_notify; read_from_io blocked
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 11285)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[want][TRACE] signal: Want
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 11285)
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=11285
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character x
[want][TRACE] signal found waiting giver, notifying
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character :
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[want][TRACE] poll_want: taker wants!
[want][TRACE] signal: Want
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'html\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'xml:lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }] }) in insertion mode BeforeHtml
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 9916)), writing: KeepAlive, keep_alive: Busy }
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 9916)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[hyper::client::pool][TRACE] put; add idle connection for "https://monoschinos.com"
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=9916
[hyper::client::pool][DEBUG] pooling idle connection for "https://monoschinos.com"
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "msvalidate.01")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character !
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 8547)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state MarkupDeclarationOpen
[html5ever::tokenizer][DEBUG] got character n
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 8547)
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=8547
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "1F2DDDCD3329DB029754BD057061D1CF")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Doctype
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"msvalidate.01\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"1F2DDDCD3329DB029754BD057061D1CF\") }] }) in insertion mode InHead
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeDoctypeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character h
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 7178)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state DoctypeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 7178)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=7178
[html5ever::tokenizer][DEBUG] got character <
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 5809)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 5809)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "UTF-8")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=5809
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 4440)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'charset\' type=static) }, value: Tendril<UTF8>(inline: \"UTF-8\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 4440)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=4440
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "viewport")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character c
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 3071)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 3071)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "width=device-width,minimum-scale=1,initial-scale=1")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=3071
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character x
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 1702)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"viewport\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"width=device-width,minimum-scale=1,initial-scale=1\") }] }) in insertion mode InHead
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 1702)
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1702
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character <
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 333)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character :
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 333)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=333
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character p
[hyper::proto::h1::io][DEBUG] read 335 bytes
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character q
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "X-UA-Compatible")))
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::io][DEBUG] read 5 bytes
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::decode][TRACE] Chunk size is 0
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::decode][TRACE] end of chunked
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[hyper::proto::h1::conn][DEBUG] incoming body completed
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'html\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'xml:lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }] }) in insertion mode BeforeHtml
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::conn][TRACE] maybe_notify; read_from_io blocked
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "IE=edge")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'http-equiv\' type=static) }, value: Tendril<UTF8>(owned: \"X-UA-Compatible\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"IE=edge\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[want][TRACE] signal: Want
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[want][TRACE] signal found waiting giver, notifying
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[want][TRACE] poll_want: taker wants!
[hyper::client::pool][TRACE] put; add idle connection for "https://monoschinos.com"
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[want][TRACE] signal: Want
[hyper::client::pool][DEBUG] pooling idle connection for "https://monoschinos.com"
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[hyper::proto::h1::conn][TRACE] Conn::read_head
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[hyper::proto::h1::role][TRACE] Response.parse([Header; 100], [u8; 1369])
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[hyper::proto::h1::role][TRACE] Response.parse Complete(698)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character !
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[hyper::proto::h1::io][DEBUG] parsed 15 headers
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state MarkupDeclarationOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "icon")))
[hyper::proto::h1::conn][DEBUG] incoming body is chunked encoding
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Doctype
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Size, 0)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeDoctypeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state DoctypeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character y
[hyper::proto::h1::decode][TRACE] Chunk size is 32064
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character p
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0x7D40 (32064 bytes)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=32064
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 31399)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[reqwest::async_impl::response][DEBUG] Response: '200 OK' for https://monoschinos.com/animes?page=62
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "image/x-icon")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 31399)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=31399
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 30030)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/favicon.ico")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "msvalidate.01")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 30030)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=30030
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 28661)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(owned: \"image/x-icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/favicon.ico\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 28661)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=28661
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 27292)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "profile")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://gmpg.org/xfn/11")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"profile\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://gmpg.org/xfn/11\") }] }) in insertion mode InHead
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 27292)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "1F2DDDCD3329DB029754BD057061D1CF")))
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=27292
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 25923)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 25923)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=25923
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"msvalidate.01\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"1F2DDDCD3329DB029754BD057061D1CF\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character :
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 24554)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 24554)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character '
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=24554
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got character m
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 23185)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'html\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'xml:lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }] }) in insertion mode BeforeHtml
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character h
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 23185)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=23185
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 21816)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//fonts.googleapis.com")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 21816)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=21816
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "UTF-8")))
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 20447)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 20447)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=20447
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 19078)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//fonts.googleapis.com\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'charset\' type=static) }, value: Tendril<UTF8>(inline: \"UTF-8\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 19078)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=19078
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character 

[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 17709)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "msvalidate.01")))
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 17709)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=17709
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 16340)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character '
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 16340)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=16340
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "1F2DDDCD3329DB029754BD057061D1CF")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "viewport")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 14971)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//s.w.org")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 14971)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"msvalidate.01\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"1F2DDDCD3329DB029754BD057061D1CF\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=14971
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//s.w.org\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 13602)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 13602)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=13602
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "width=device-width,minimum-scale=1,initial-scale=1")))
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 12233)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"viewport\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"width=device-width,minimum-scale=1,initial-scale=1\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 12233)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=12233
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 10864)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "UTF-8")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 10864)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character a
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=10864
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 9495)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character q
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "X-UA-Compatible")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'charset\' type=static) }, value: Tendril<UTF8>(inline: \"UTF-8\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 9495)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=9495
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 8126)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "IE=edge")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//connect.facebook.net/")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 8126)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character n
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=8126
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 6757)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'http-equiv\' type=static) }, value: Tendril<UTF8>(owned: \"X-UA-Compatible\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"IE=edge\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "viewport")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 6757)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//connect.facebook.net/\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=6757
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 5388)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "icon")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 5388)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=5388
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 4019)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "width=device-width,minimum-scale=1,initial-scale=1")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 4019)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=4019
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"viewport\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"width=device-width,minimum-scale=1,initial-scale=1\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 2650)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "image/x-icon")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 2650)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=2650
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 1281)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 1281)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/favicon.ico")))
[html5ever::tokenizer][DEBUG] got character t
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1281
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "robots")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[hyper::proto::h1::io][DEBUG] read 1283 bytes
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(owned: \"image/x-icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/favicon.ico\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character q
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character v
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"robots\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "X-UA-Compatible")))
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::decode][TRACE] Chunk size is 2835
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::decode][DEBUG] incoming chunked header: 0xB13 (2835 bytes)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=2835
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 1471)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "IE=edge")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 1471)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "profile")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=1471
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[hyper::proto::h1::io][DEBUG] read 1369 bytes
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(Body, 102)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'http-equiv\' type=static) }, value: Tendril<UTF8>(owned: \"X-UA-Compatible\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"IE=edge\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://gmpg.org/xfn/11")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(Body, 102)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[hyper::proto::h1::decode][TRACE] Chunked read, remaining=102
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[hyper::proto::h1::io][DEBUG] read 104 bytes
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Body(Chunked(BodyCr, 0)), writing: KeepAlive, keep_alive: Busy }
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::decode][TRACE] decode; state=Chunked(BodyCr, 0)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"profile\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://gmpg.org/xfn/11\") }] }) in insertion mode InHead
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state Data
[hyper::proto::h1::io][DEBUG] read 5 bytes
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:locale")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[hyper::proto::h1::decode][TRACE] Read chunk hex size
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character 

[hyper::proto::h1::decode][TRACE] Chunk size is 0
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::decode][TRACE] end of chunked
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[hyper::proto::h1::conn][DEBUG] incoming body completed
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[hyper::proto::h1::conn][TRACE] maybe_notify; read_from_io blocked
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[want][TRACE] signal: Want
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[want][TRACE] signal found waiting giver, notifying
[html5ever::tokenizer][DEBUG] got character <
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[want][TRACE] signal: Want
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[hyper::proto::h1::conn][TRACE] flushed({role=client}): State { reading: Init, writing: Init, keep_alive: Idle }
[want][TRACE] poll_want: taker wants!
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[hyper::client::pool][TRACE] put; add idle connection for "https://monoschinos.com"
[html5ever::tokenizer][DEBUG] got character e
[hyper::client::pool][DEBUG] pooling idle connection for "https://monoschinos.com"
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "icon")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es_ES")))
[html5ever::tokenizer][DEBUG] got character !
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state MarkupDeclarationOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Doctype
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeDoctypeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state DoctypeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:locale\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"es_ES\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "image/x-icon")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/favicon.ico")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//fonts.googleapis.com")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(owned: \"image/x-icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/favicon.ico\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//fonts.googleapis.com\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character :
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "profile")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'html\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'xml:lang\' type=static) }, value: Tendril<UTF8>(inline: \"es\") }] }) in insertion mode BeforeHtml
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//s.w.org")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://gmpg.org/xfn/11")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode BeforeHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"profile\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://gmpg.org/xfn/11\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//s.w.org\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "msvalidate.01")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//fonts.googleapis.com")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "1F2DDDCD3329DB029754BD057061D1CF")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//connect.facebook.net/")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//fonts.googleapis.com\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"msvalidate.01\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"1F2DDDCD3329DB029754BD057061D1CF\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//connect.facebook.net/\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "UTF-8")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'charset\' type=static) }, value: Tendril<UTF8>(inline: \"UTF-8\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//s.w.org")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "robots")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//s.w.org\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "viewport")))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"robots\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "width=device-width,minimum-scale=1,initial-scale=1")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"viewport\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"width=device-width,minimum-scale=1,initial-scale=1\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//connect.facebook.net/")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:locale")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character q
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//connect.facebook.net/\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "X-UA-Compatible")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es_ES")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:locale\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"es_ES\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "IE=edge")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "index, follow")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'http-equiv\' type=static) }, value: Tendril<UTF8>(owned: \"X-UA-Compatible\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"IE=edge\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "robots")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "msnbot")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "icon")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"robots\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"msnbot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "image/x-icon")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/favicon.ico")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:locale")))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(owned: \"image/x-icon\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/favicon.ico\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot-image")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \" \")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es_ES")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot-image\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:locale\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"es_ES\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "profile")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://gmpg.org/xfn/11")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:site_name")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"profile\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://gmpg.org/xfn/11\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:site_name\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//fonts.googleapis.com")))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//fonts.googleapis.com\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:url")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes?page=15")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:url\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes?page=15\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//s.w.org")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//s.w.org\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:title")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "index, follow")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dns-prefetch")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "msnbot")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "//connect.facebook.net/")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"msnbot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"dns-prefetch\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"//connect.facebook.net/\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "description")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot-image")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "robots")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot-image\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "index, follow")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"robots\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "msnbot")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:description")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"msnbot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:site_name")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:locale")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:site_name\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "es_ES")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:locale\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"es_ES\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:image")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot-image")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:url")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot-image\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/web.png")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:image\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/web.png\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes?page=5")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:url\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes?page=5\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:site_name")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:card")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:site_name\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "summary")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:title")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:card\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"summary\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:url")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:description")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes?page=49")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "description")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:url\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes?page=49\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:title")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:title")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:description")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "all, index, follow")))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "yahoo-slurp")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"all, index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"yahoo-slurp\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "description")))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:domain")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:image")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "index, follow")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/web.png")))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:domain\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "msnbot")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:image\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/web.png\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"index, follow\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"msnbot\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:description")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:card")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fontawesome")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "if(media!=\'all\')media=\'all\'")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "summary")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "googlebot-image")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:card\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"summary\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"googlebot-image\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/lib/font-awesome/css/all.min.css")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:image")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:description")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/web.png")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:site_name")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "none")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:image\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/web.png\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"fontawesome\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'onload\' type=static) }, value: Tendril<UTF8>(owned: \"if(media!=\\\'all\\\')media=\\\'all\\\'\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/lib/font-awesome/css/all.min.css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"none\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:card")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:site_name\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:title")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "summary")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/css/webapp.css?v=12")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:card\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"summary\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:url")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:description")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes?page=62")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/css/webapp.css?v=12\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:domain")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:url\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes?page=62\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: " @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \" @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:domain\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:title")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:title")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fontawesome")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "canonical")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "if(media!=\'all\')media=\'all\'")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:domain")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"canonical\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "description")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/lib/font-awesome/css/all.min.css")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state RawData(Rcdata)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "none")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes 2019 - MonosChinos\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rcdata)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rcdata)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rcdata)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:domain\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"fontawesome\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'onload\' type=static) }, value: Tendril<UTF8>(owned: \"if(media!=\\\'all\\\')media=\\\'all\\\'\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/lib/font-awesome/css/all.min.css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"none\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "og:description")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    const baseUrl = \"https://monoschinos.com/\";")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    const baseUrl = \\\"https://monoschinos.com/\\\";\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "    ")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"    \")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fontawesome")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(owned: \"og:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/css/webapp.css?v=12")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "if(media!=\'all\')media=\'all\'")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/jquery-3.2.1.min.js")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/lib/font-awesome/css/all.min.css")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/jquery-3.2.1.min.js\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "og:image")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/css/webapp.css?v=12\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: " @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/web.png")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "none")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \" @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'property\' type=dynamic) }, value: Tendril<UTF8>(inline: \"og:image\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/web.png\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character y
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"fontawesome\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'onload\' type=static) }, value: Tendril<UTF8>(owned: \"if(media!=\\\'all\\\')media=\\\'all\\\'\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/lib/font-awesome/css/all.min.css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"none\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/site.js?v=0.0.1")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/site.js?v=0.0.1\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:card")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "canonical")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/css/webapp.css?v=12")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "summary")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".Wdgt .Title {")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".Wdgt .Title {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:card\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(inline: \"summary\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 1rem;")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 1rem;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"canonical\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv {")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state RawData(Rcdata)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #1d88b5;")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/css/webapp.css?v=12\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #1d88b5;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes 2019 - MonosChinos\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rcdata)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rcdata)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border: 1px solid #29abe2;")))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rcdata)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border: 1px solid #29abe2;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    color: #fff;")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    color: #fff;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:description")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: " @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \" @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h1 {")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h1 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-weight: bold;")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-weight: bold;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Disfruta de todos los animes 2019 aquí en MonosChinos tu sitio web para ver anime online.")))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 16px;")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 16px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    const baseUrl = \"https://monoschinos.com/\";")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    const baseUrl = \\\"https://monoschinos.com/\\\";\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:description\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Disfruta de todos los animes 2019 aqu\u{ed} en MonosChinos tu sitio web para ver anime online.\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "    ")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"    \")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2{")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "canonical")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul{")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:title")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    list-style:none;")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    list-style:none;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin:0;")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding:0;")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/jquery-3.2.1.min.js")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"canonical\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/jquery-3.2.1.min.js\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:title\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"Todos los animes 2019 - MonosChinos\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2 {")))
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin: 0px;")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin: 0px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state RawData(Rcdata)
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes 2019 - MonosChinos\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #383838;")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #383838;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rcdata)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rcdata)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "twitter:domain")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rcdata)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding: 11px 10px;")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding: 11px 10px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border-radius: 20px;")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border-radius: 20px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/site.js?v=0.0.1")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul li{")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul li{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/site.js?v=0.0.1\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    display:inline-block;")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    display:inline-block;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    const baseUrl = \"https://monoschinos.com/\";")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    const baseUrl = \\\"https://monoschinos.com/\\\";\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".caps .Image figure:before {")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'meta\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(owned: \"twitter:domain\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'content\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".caps .Image figure:before {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "    ")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"    \")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding-top: 28%;")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding-top: 28%;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    width: 105%;")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    width: 105%;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".Wdgt .Title {")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".Wdgt .Title {\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 1rem;")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 1rem;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".animes .link-anime .Title {")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".animes .link-anime .Title {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    white-space: pre-line;")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    white-space: pre-line;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv {")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    text-align: center;")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fontawesome")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    text-align: center;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #1d88b5;")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #1d88b5;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border: 1px solid #29abe2;")))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border: 1px solid #29abe2;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "if(media!=\'all\')media=\'all\'")))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/jquery-3.2.1.min.js")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    color: #fff;")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/jquery-3.2.1.min.js\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    color: #fff;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/lib/font-awesome/css/all.min.css")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h1 {")))
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h1 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-weight: bold;")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-weight: bold;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "manifest")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 16px;")))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 16px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "none")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2{")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/manifest.json")))
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/site.js?v=0.0.1")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/site.js?v=0.0.1\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"fontawesome\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'onload\' type=static) }, value: Tendril<UTF8>(owned: \"if(media!=\\\'all\\\')media=\\\'all\\\'\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/lib/font-awesome/css/all.min.css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"none\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"manifest\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/manifest.json\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul{")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'body\' type=static), self_closing: false, attrs: [] }) in insertion mode AfterHead
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "stylesheet")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".Wdgt .Title {")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".Wdgt .Title {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/css/webapp.css?v=12")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    list-style:none;")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    list-style:none;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 1rem;")))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 1rem;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin:0;")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv {")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "text/css")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding:0;")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #1d88b5;")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #1d88b5;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border: 1px solid #29abe2;")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar navbar-expand-lg navbar-dark tvanime-bar")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border: 1px solid #29abe2;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(SingleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "all")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\''))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    color: #fff;")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character '
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    color: #fff;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar navbar-expand-lg navbar-dark tvanime-bar\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"stylesheet\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/css/webapp.css?v=12\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"text/css\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'media\' type=static) }, value: Tendril<UTF8>(inline: \"all\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h1 {")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h1 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2 {")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-weight: bold;")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-weight: bold;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 16px;")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 16px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: " @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \" @media (min-width: 600px) and (max-width: 480px) { footer {font-size: 12px;} }\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "container")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin: 0px;")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin: 0px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2{")))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"container\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2{\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #383838;")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #383838;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding: 11px 10px;")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character g
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul{")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding: 11px 10px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    list-style:none;")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    list-style:none;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border-radius: 20px;")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin:0;")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-brand logo")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border-radius: 20px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding:0;")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "canonical")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-brand logo\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2 {")))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul li{")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul li{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    display:inline-block;")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    display:inline-block;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin: 0px;")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin: 0px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #383838;")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(owned: \"canonical\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #383838;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding: 11px 10px;")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding: 11px 10px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".caps .Image figure:before {")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".caps .Image figure:before {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border-radius: 20px;")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border-radius: 20px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/logo.png")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state RawData(Rcdata)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes 2019 - MonosChinos")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes 2019 - MonosChinos\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rcdata)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rcdata)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul li{")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rcdata)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul li{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    display:inline-block;")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    display:inline-block;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding-top: 28%;")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'title\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "top: 25px")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding-top: 28%;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".caps .Image figure:before {")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'img\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/logo.png\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'alt\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'style\' type=static) }, value: Tendril<UTF8>(owned: \"top: 25px\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".caps .Image figure:before {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    width: 105%;")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    width: 105%;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding-top: 28%;")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding-top: 28%;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    width: 105%;")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    width: 105%;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".animes .link-anime .Title {")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    const baseUrl = \"https://monoschinos.com/\";")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".animes .link-anime .Title {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    const baseUrl = \\\"https://monoschinos.com/\\\";\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    white-space: pre-line;")))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".animes .link-anime .Title {")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "    ")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    white-space: pre-line;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".animes .link-anime .Title {\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"    \")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    text-align: center;")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    white-space: pre-line;")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    text-align: center;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    white-space: pre-line;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    text-align: center;")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    text-align: center;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/jquery-3.2.1.min.js")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/jquery-3.2.1.min.js\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "manifest")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "collapse")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/manifest.json")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"manifest\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/manifest.json\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/js/site.js?v=0.0.1")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "#navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/js/site.js?v=0.0.1\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state RawData(ScriptData)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(ScriptData)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(ScriptData)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(ScriptData)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "manifest")))
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'body\' type=static), self_closing: false, attrs: [] }) in insertion mode AfterHead
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'script\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/manifest.json")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state RawData(Rawtext)
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".Wdgt .Title {")))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".Wdgt .Title {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 1rem;")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 1rem;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"manifest\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/manifest.json\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv {")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #1d88b5;")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #1d88b5;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar navbar-expand-lg navbar-dark tvanime-bar")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border: 1px solid #29abe2;")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Toggle navigation")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border: 1px solid #29abe2;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar navbar-expand-lg navbar-dark tvanime-bar\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    color: #fff;")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-target\' type=dynamic) }, value: Tendril<UTF8>(owned: \"#navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-controls\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Toggle navigation\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    color: #fff;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h1 {")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h1 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-weight: bold;")))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-weight: bold;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 16px;")))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 16px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'body\' type=static), self_closing: false, attrs: [] }) in insertion mode AfterHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "container")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler-icon")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2{")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"container\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler-icon\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul{")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul{\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character u
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    list-style:none;")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    list-style:none;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin:0;")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding:0;")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding:0;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-brand logo")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar navbar-expand-lg navbar-dark tvanime-bar")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-brand logo\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv h2 {")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar navbar-expand-lg navbar-dark tvanime-bar\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv h2 {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    font-size: 14px;")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    font-size: 14px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    margin: 0px;")))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    margin: 0px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    background: #383838;")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    background: #383838;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "collapse navbar-collapse")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding: 11px 10px;")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "container")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding: 11px 10px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    border-radius: 20px;")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    border-radius: 20px;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/logo.png")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character g
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"collapse navbar-collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".info-tv ul li{")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".info-tv ul li{\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    display:inline-block;")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    display:inline-block;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".caps .Image figure:before {")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".caps .Image figure:before {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-brand logo")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    padding-top: 28%;")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    padding-top: 28%;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-brand logo\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    width: 105%;")))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-nav mr-auto")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    width: 105%;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-nav mr-auto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "top: 25px")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: ".animes .link-anime .Title {")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \".animes .link-anime .Title {\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'img\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/logo.png\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'alt\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'style\' type=static) }, value: Tendril<UTF8>(owned: \"top: 25px\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    white-space: pre-line;")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    white-space: pre-line;\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "    text-align: center;")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"    text-align: center;\")) in insertion mode Text
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "}")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"}\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode Text
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state RawLessThanSign(Rawtext)
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state RawEndTagOpen(Rawtext)
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state RawEndTagName(Rawtext)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/logo.png")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'style\' type=static), self_closing: false, attrs: [] }) in insertion mode Text
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character k
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "manifest")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "top: 25px")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'img\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/logo.png\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'alt\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'style\' type=static) }, value: Tendril<UTF8>(owned: \"top: 25px\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Inicio ")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Inicio \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/manifest.json")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state SelfClosingStartTag
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'link\' type=static), self_closing: true, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'rel\' type=static) }, value: Tendril<UTF8>(inline: \"manifest\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/manifest.json\") }] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "sr-only")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(Whitespace, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "collapse")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"sr-only\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "(current)")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"(current)\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'head\' type=static), self_closing: false, attrs: [] }) in insertion mode InHead
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'body\' type=static), self_closing: false, attrs: [] }) in insertion mode AfterHead
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "#navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar navbar-expand-lg navbar-dark tvanime-bar")))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar navbar-expand-lg navbar-dark tvanime-bar\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "collapse")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item active")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item active\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "#navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "container")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Toggle navigation")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-target\' type=dynamic) }, value: Tendril<UTF8>(owned: \"#navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-controls\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Toggle navigation\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Animes")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-brand logo")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-brand logo\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler-icon")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler-icon\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Toggle navigation")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-target\' type=dynamic) }, value: Tendril<UTF8>(owned: \"#navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-controls\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Toggle navigation\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/assets/img/logo.png")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "MonosChinos")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler-icon")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "collapse navbar-collapse")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler-icon\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "top: 25px")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'img\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'src\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/assets/img/logo.png\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'alt\' type=static) }, value: Tendril<UTF8>(owned: \"MonosChinos\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'style\' type=static) }, value: Tendril<UTF8>(owned: \"top: 25px\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/ovas")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/ovas\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"collapse navbar-collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ovas")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ovas\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'figure\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-nav mr-auto")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-nav mr-auto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "collapse navbar-collapse")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"collapse navbar-collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/emision")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/emision\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-nav mr-auto")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "collapse")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Emisión")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Emisi\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-nav mr-auto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "#navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Inicio ")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Inicio \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "sr-only")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"sr-only\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "(current)")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"(current)\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "search-container")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"search-container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Inicio ")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Inicio \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Toggle navigation")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-target\' type=dynamic) }, value: Tendril<UTF8>(owned: \"#navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-controls\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Toggle navigation\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-inline my-2 my-lg-0 buscador")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "sr-only")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"sr-only\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "(current)")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"(current)\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item active")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "get")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item active\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-toggler-icon")))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-inline my-2 my-lg-0 buscador\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'method\' type=static) }, value: Tendril<UTF8>(inline: \"get\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-toggler-icon\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-control mr-sm-0 pr-sm-5 pl-sm-5")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Animes")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "q")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item active")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "collapse navbar-collapse")))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item active\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "search")))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbarSupportedContent")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"collapse navbar-collapse\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"navbarSupportedContent\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Buscar anime...")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "navbar-nav mr-auto")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Animes")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"navbar-nav mr-auto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Search")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/ovas")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/ovas\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ovas")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ovas\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "off")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'input\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-control mr-sm-0 pr-sm-5 pl-sm-5\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"q\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'placeholder\' type=static) }, value: Tendril<UTF8>(owned: \"Buscar anime...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'autocomplete\' type=static) }, value: Tendril<UTF8>(inline: \"off\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fa fa-search")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fa fa-search\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Inicio ")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Inicio \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/ovas")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/ovas\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ovas")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ovas\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "sr-only")))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"sr-only\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "(current)")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"(current)\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/emision")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/emision\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Emisión")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "autocomplete-search")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Emisi\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Escribe algo..")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item active")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item active\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargando...")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/emision")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "search-container")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/emision\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Emisión")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Emisi\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"search-container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/animes")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/animes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Animes")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "No se hallaron resultados.")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-inline my-2 my-lg-0 buscador")))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "get")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "search-container")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"search-container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-inline my-2 my-lg-0 buscador\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'method\' type=static) }, value: Tendril<UTF8>(inline: \"get\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-inline my-2 my-lg-0 buscador")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Estreno")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-control mr-sm-0 pr-sm-5 pl-sm-5")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "get")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/ovas")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/ovas\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "q")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ovas")))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ovas\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Finalizado")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "search")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-inline my-2 my-lg-0 buscador\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'method\' type=static) }, value: Tendril<UTF8>(inline: \"get\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Proximamente")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-control mr-sm-0 pr-sm-5 pl-sm-5")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "nav-item ")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"nav-item \") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Buscar anime...")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "q")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "search")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Search")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "nav-link")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"autocomplete-search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-initial-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Escribe algo..\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-loading-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargando...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-no-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"No se hallaron resultados.\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-premiere-text\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Estreno\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-finished-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Finalizado\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-coming-soon-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Proximamente\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://monoschinos.com/emision")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"nav-link\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://monoschinos.com/emision\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Emisión")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "off")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Emisi\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Buscar anime...")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'input\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-control mr-sm-0 pr-sm-5 pl-sm-5\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"q\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'placeholder\' type=static) }, value: Tendril<UTF8>(owned: \"Buscar anime...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'autocomplete\' type=static) }, value: Tendril<UTF8>(inline: \"off\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Search")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'li\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button ml-4")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fa fa-search")))
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'ul\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button ml-4\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fa fa-search\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "off")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'input\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-control mr-sm-0 pr-sm-5 pl-sm-5\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"q\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'placeholder\' type=static) }, value: Tendril<UTF8>(owned: \"Buscar anime...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'autocomplete\' type=static) }, value: Tendril<UTF8>(inline: \"off\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://www.facebook.com/AnimeTVG/")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "search-container")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"search-container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "_blank")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fa fa-search")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fa fa-search\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "tooltip")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-inline my-2 my-lg-0 buscador")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "autocomplete-search")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://www.facebook.com/AnimeTVG/\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'target\' type=static) }, value: Tendril<UTF8>(inline: \"_blank\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"tooltip\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'title\' type=static) }, value: Tendril<UTF8>(owned: \"S\u{ed}guenos en Facebook!\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "get")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Escribe algo..")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fab fa-facebook-f")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fab fa-facebook-f\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "autocomplete-search")))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-inline my-2 my-lg-0 buscador\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'method\' type=static) }, value: Tendril<UTF8>(inline: \"get\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargando...")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Escribe algo..")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "form-control mr-sm-0 pr-sm-5 pl-sm-5")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button-message")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button-message\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "No se hallaron resultados.")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"S\u{ed}guenos en Facebook!\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "q")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargando...")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "search")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "/search")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "No se hallaron resultados.")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Buscar anime...")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Estreno")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Search")))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Finalizado")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "off")))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'input\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"form-control mr-sm-0 pr-sm-5 pl-sm-5\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'name\' type=static) }, value: Tendril<UTF8>(inline: \"q\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'action\' type=static) }, value: Tendril<UTF8>(inline: \"/search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'placeholder\' type=static) }, value: Tendril<UTF8>(owned: \"Buscar anime...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-label\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'autocomplete\' type=static) }, value: Tendril<UTF8>(inline: \"off\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Estreno")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Proximamente")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fa fa-search")))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fa fa-search\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title-container container")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Finalizado")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title-container container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'form\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"autocomplete-search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-initial-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Escribe algo..\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-loading-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargando...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-no-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"No se hallaron resultados.\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-premiere-text\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Estreno\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-finished-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Finalizado\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-coming-soon-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Proximamente\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Proximamente")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes")))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "autocomplete-search")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button ml-4")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"autocomplete-search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-initial-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Escribe algo..\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-loading-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargando...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-no-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"No se hallaron resultados.\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-premiere-text\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Estreno\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-finished-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Finalizado\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-coming-soon-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Proximamente\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button ml-4\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Escribe algo..")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-container container")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-container container\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://www.facebook.com/AnimeTVG/")))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargando...")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "clearfix")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "_blank")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"clearfix\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button ml-4")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button ml-4\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "No se hallaron resultados.")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "tooltip")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://www.facebook.com/AnimeTVG/")))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "_blank")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://www.facebook.com/AnimeTVG/\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'target\' type=static) }, value: Tendril<UTF8>(inline: \"_blank\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"tooltip\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'title\' type=static) }, value: Tendril<UTF8>(owned: \"S\u{ed}guenos en Facebook!\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "tooltip")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fab fa-facebook-f")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fab fa-facebook-f\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Estreno")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://www.facebook.com/AnimeTVG/\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'target\' type=static) }, value: Tendril<UTF8>(inline: \"_blank\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"tooltip\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'title\' type=static) }, value: Tendril<UTF8>(owned: \"S\u{ed}guenos en Facebook!\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Categoría")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Categor\u{ed}a\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button-message")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fab fa-facebook-f")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Finalizado")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button-message\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fab fa-facebook-f\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"S\u{ed}guenos en Facebook!\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Proximamente")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button-message")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character m
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button-message\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"S\u{ed}guenos en Facebook!\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cargar Mas")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"autocomplete-search\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-initial-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Escribe algo..\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-loading-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargando...\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-no-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"No se hallaron resultados.\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-results-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-premiere-text\' type=dynamic) }, value: Tendril<UTF8>(inline: \"Estreno\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-finished-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Finalizado\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-coming-soon-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Proximamente\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-see-more-text\' type=dynamic) }, value: Tendril<UTF8>(owned: \"Cargar Mas\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button ml-4")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title-container container")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button ml-4\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title-container container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "https://www.facebook.com/AnimeTVG/")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "_blank")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title-container container")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title-container container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "tooltip")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"https://www.facebook.com/AnimeTVG/\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'target\' type=static) }, value: Tendril<UTF8>(inline: \"_blank\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"tooltip\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'title\' type=static) }, value: Tendril<UTF8>(owned: \"S\u{ed}guenos en Facebook!\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-container container")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-container container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "fab fa-facebook-f")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"fab fa-facebook-f\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "clearfix")))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"clearfix\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'i\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-container container")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-container container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "facebook-button-message")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"facebook-button-message\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Síguenos en Facebook!")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"S\u{ed}guenos en Facebook!\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/anime")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "clearfix")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/anime\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'span\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"clearfix\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Anime")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Anime\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ova")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ova\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ova")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ova\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Categoría")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Categor\u{ed}a\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'nav\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'header\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/pelicula")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/pelicula\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Pelicula")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Pelicula\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Categoría")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Categor\u{ed}a\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title-container container")))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title-container container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-title")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-title\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Todos los animes")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Todos los animes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 1
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'h1\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/especial")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/especial\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Especial")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Especial\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-container container")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-container container\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "clearfix")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(inline: \"clearfix\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/corto")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/corto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Corto")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Corto\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Categoría")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/anime")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Categor\u{ed}a\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/anime\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Anime")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Anime\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ona")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ona\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ona")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ona\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ova")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ova\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ova")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ova\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/anime")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/anime\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Anime")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Anime\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/pelicula")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/pelicula\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Pelicula")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Pelicula\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ova")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ova\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ova")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ova\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/especial")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/pelicula")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/especial\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Especial")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Especial\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/pelicula\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Pelicula")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Género")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Pelicula\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"G\u{e9}nero\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "categoryMenuButton")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"categoryMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/corto")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/corto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Corto")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Corto\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/especial")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/especial\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Especial")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Especial\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ona")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ona\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ona")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ona\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/corto")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/anime")))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/corto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/anime\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Anime")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Corto")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Anime\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Corto\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ova")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ona")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ova\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ova")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ona\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ova\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ona")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ona\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/pelicula")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/pelicula\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Pelicula")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Pelicula\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/especial")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/especial\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Especial")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Especial\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Género")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"G\u{e9}nero\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/accion")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/accion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Acción")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Acci\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/corto")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/corto\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Corto")))
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Corto\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Género")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"G\u{e9}nero\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/aventura")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/aventura\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Aventura")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Aventura\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/categoria/ona")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/categoria/ona\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ona")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ona\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/carreras")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/carreras\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Carreras")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Carreras\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ciencia-ficcion")))
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "float-left")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ciencia-ficcion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"float-left\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Ciencia Ficción")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Ciencia Ficci\u{f3}n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "filter-dropdown dropdown")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"filter-dropdown dropdown\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/comedia")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/comedia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Comedia")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Comedia\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "d-block small filter-label")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'for\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"d-block small filter-label\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Género")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"G\u{e9}nero\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/accion")))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/accion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Acción")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'label\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Acci\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/cyberpunk")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/cyberpunk\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cyberpunk")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Cyberpunk\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "btn btn-secondary filter-button dropdown-toggle")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "button")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/aventura")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/aventura\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Aventura")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Aventura\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character g
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/deportes")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "dropdown")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/deportes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Deportes")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Deportes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/carreras")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "true")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/carreras\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/accion")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Carreras")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Carreras\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/accion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Acción")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Acci\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character x
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/drama")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character p
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/drama\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Drama")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Drama\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "false")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"btn btn-secondary filter-button dropdown-toggle\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'type\' type=static) }, value: Tendril<UTF8>(inline: \"button\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'id\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'data-toggle\' type=dynamic) }, value: Tendril<UTF8>(inline: \"dropdown\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-haspopup\' type=static) }, value: Tendril<UTF8>(inline: \"true\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-expanded\' type=static) }, value: Tendril<UTF8>(inline: \"false\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ciencia-ficcion")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character u
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ciencia-ficcion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character t
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character o
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/aventura")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character n
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Ciencia Ficción")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'button\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Ciencia Ficci\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/aventura\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Aventura")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Aventura\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character v
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ecchi")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-menu filter-dropdown-menu")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ecchi\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ecchi")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ecchi\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character i
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character -
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character d
[html5ever::tokenizer][DEBUG] got character b
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character y
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "genreMenuButton")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/comedia")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'div\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-menu filter-dropdown-menu\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'aria-labelledby\' type=static) }, value: Tendril<UTF8>(owned: \"genreMenuButton\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/carreras")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/comedia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Comedia")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Comedia\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/carreras\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/escolares")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Carreras")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Carreras\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/escolares\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Escolares")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Escolares\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(inline: \"\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Todo")))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Todo\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/cyberpunk")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ciencia-ficcion")))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/cyberpunk\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ciencia-ficcion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cyberpunk")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/fantasia")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Ciencia Ficción")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Cyberpunk\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Ciencia Ficci\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/fantasia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Fantasía")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Fantas\u{ed}a\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/accion")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/accion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Acción")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/comedia")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Acci\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/deportes")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/comedia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Comedia")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Comedia\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/deportes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/gore")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Deportes")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/gore\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Deportes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Gore")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Gore\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/aventura")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/aventura\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/drama")))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/cyberpunk")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Aventura")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Aventura\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/cyberpunk\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cyberpunk")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/drama\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/harem")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Cyberpunk\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Drama")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Drama\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/harem\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Harem")))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Harem\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/carreras")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/carreras\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Carreras")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Carreras\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/deportes")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ecchi")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/horror")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/deportes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Deportes")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Deportes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ecchi\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/horror\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ecchi")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Horror")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ecchi\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Horror\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ciencia-ficcion")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ciencia-ficcion\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Ciencia Ficción")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Ciencia Ficci\u{f3}n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/drama")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/josei")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/escolares")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/drama\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/josei\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Drama")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Josei")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Josei\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Drama\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/escolares\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Escolares")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Escolares\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/comedia")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/comedia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Comedia")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Comedia\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ecchi")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/fantasia")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/lucha")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/fantasia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ecchi\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Fantasía")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ecchi")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Fantas\u{ed}a\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/lucha\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ecchi\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Lucha")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Lucha\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/cyberpunk")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/cyberpunk\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Cyberpunk")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Cyberpunk\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/escolares")))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/gore")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/escolares\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Escolares")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/gore\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Escolares\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Gore")))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Gore\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/magia")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/magia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Magia")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Magia\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/deportes")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/deportes\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Deportes")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Deportes\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/mecha")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/fantasia")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/harem")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/mecha\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/fantasia\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "Fantasía")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/harem\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(shared: \"Fantas\u{ed}a\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Mecha")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Harem")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Mecha\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Harem\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/gore")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/drama")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/drama\") }] }) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/gore\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Drama")))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Gore")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Gore\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Drama\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/horror")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/militar")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/horror\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Horror")))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Horror\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/militar\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: " ")))
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \" \")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Militar")))
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Militar\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/harem")))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/harem\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/ecchi")))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Harem")))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Harem\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/ecchi\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/josei")))
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character e
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Ecchi")))
[html5ever::tokenizer][DEBUG] got character f
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Ecchi\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "/genero/misterio")))
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/josei\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Josei")))
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Josei\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: StartTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'class\' type=static) }, value: Tendril<UTF8>(owned: \"dropdown-item\") }, Attribute { name: QualName { prefix: None, ns: Atom(\'\' type=static), local: Atom(\'href\' type=static) }, value: Tendril<UTF8>(owned: \"/genero/misterio\") }] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(inline: "Misterio")))
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"Misterio\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character /
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] processing in state EndTagOpen
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character >
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tree_builder][DEBUG] processing TagToken(Tag { kind: EndTag, name: Atom(\'a\' type=static), self_closing: false, attrs: [] }) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state Data
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\n'))
[html5ever::tokenizer][DEBUG] got character 

[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tree_builder][DEBUG] processing CharacterTokens(NotSplit, Tendril<UTF8>(inline: \"\\n\")) in insertion mode InBody
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('<'))
[html5ever::tokenizer][DEBUG] got character <
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] processing in state TagOpen
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] processing in state AttributeValue(DoubleQuoted)
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] processing in state TagName
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got characters Some(NotFromSet(Tendril<UTF8>(shared: "dropdown-item")))
[html5ever::tokenizer][DEBUG] got character a
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] got characters Some(FromSet('\"'))
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
[html5ever::tokenizer][DEBUG] got character "
[html5ever::tokenizer][DEBUG] got character s
[html5ever::tokenizer][DEBUG] got character c
[html5ever::tokenizer][DEBUG] got character h
[html5ever::tokenizer][DEBUG] processing in state AfterAttributeValueQuoted
[html5ever::tokenizer][DEBUG] got character =
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] processing in state AttributeName
[html5ever::tokenizer][DEBUG] got character  
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeValue
[html5ever::tokenizer][DEBUG] got character l
[html5ever::tokenizer][DEBUG] got character r
[html5ever::tokenizer][DEBUG] processing in state BeforeAttributeName
